---
- hosts: all
  tasks:
    - name: Check if integration logs exist
      stat:
        path: /tmp/docker-logs
      register: docker_logs

    - name: Compress integration logs
      shell: |
        gzip {{ docker_logs.stat.path }}/*
      when: docker_logs.stat.exists

    - name: Fetch integration logs
      synchronize:
        src: '{{ docker_logs.stat.path }}/'
        dest: '{{ zuul.executor.log_root }}/docker/'
        mode: pull
        copy_links: true
        verify_host: true
        rsync_opts: []
      when: docker_logs.stat.exists

    - name: Check if coverage exists
      stat:
        path: /tmp/integration-tests-coverage
      register: coverage_artifacts

    - name: Check if coverage files exist
      find:
        paths: /tmp/integration-tests-coverage/
      register: coverage_files_found
      when: coverage_artifacts.stat.exists

    - name: Install coverage tool (Bullseye)
      pip:
        name: coverage
        state: present
        extra_args: --user
      when:
        - ansible_distribution == "Debian"
        - ansible_distribution_release == "bullseye"
        - coverage_artifacts.stat.exists
        - coverage_files_found.matched > 0

    - name: Install coverage tool (Bookworm)
      shell: pipx install coverage
      when:
        - ansible_distribution == "Debian"
        - ansible_distribution_release == "bookworm"
        - coverage_artifacts.stat.exists
        - coverage_files_found.matched > 0

    - name: Generate coverage report
      shell: |
        python3 -m coverage combine --data-file {{ coverage_artifacts.stat.path }}/combined.coverage {{ coverage_artifacts.stat.path }}/*.coverage
        python3 -m coverage html --data-file {{ coverage_artifacts.stat.path }}/combined.coverage --directory {{ coverage_artifacts.stat.path }}/report-html
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.local/bin"
      args:
        chdir: "{{ zuul.project.src_dir }}"
      when:
        - coverage_artifacts.stat.exists
        - coverage_files_found.matched > 0

    - name: Fetch coverage HTML report
      synchronize:
        src: '{{ coverage_artifacts.stat.path }}/report-html/'
        dest: '{{ zuul.executor.log_root }}/coverage/'
        mode: pull
        copy_links: true
        verify_host: true
        rsync_opts: []
      when:
        - coverage_artifacts.stat.exists
        - coverage_files_found.matched > 0
